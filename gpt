#!/usr/bin/env bash
#
# Installation:
#
# - save this file as "gpt" somewhere in your path
# - get an openai api key at: https://platform.openai.com/account/api-keys
# - make sure you have `jq` and are either on a mac or have `keyring` installed
#   - jq: https://stedolan.github.io/jq/
#   - keyring: https://github.com/jaraco/keyring
# - on its first run, this script will prompt for your key and save it to
#   system password storage so that you don't have to enter it in the future
#
# If you prefer, you can put your API key directly in here or modify the 
# `OPENAIKEY` line to use your preferred secrets manager

function usage {
    cat <<EOF
gpt [-hpv] [-nc] [-m <model>] [-t <temperature>] <description>

chat with openai's /chat/completions endpoint

FLAGS: 

    -h, --help: print this help and exit
    -m, --model: set the model you want to use. Defaults to $MODEL
    -nc, --no-context: do not send recent message context to openai
    -p, --api-key: print the openai API key found by this script and exit
    -t, --temperature: set the temperature. Defaults to $TEMPERATURE
    -v, --verbose: print verbose debugging information

STORAGE:

    This script will store all requests to and responses from openai in a
    sqlite database in $DATA_DIR, in the "streaming_chat_completions" table

EXAMPLE USAGE:

    you don't need to quote the arguments to gpt:

gpt write a bash script that uses curl to access the openai API

    you can pipe input into it, and it will be appended to the end of your
    query:

git diff | gpt -nc write a commit message for the following diff:

    if you have quotes in your query, you may need to quote it:

gpt "tell me why bash's quote handling is great"
EOF
exit 1
}

RED=$(tput setaf 1)
CLEAR=$(tput sgr0)

function die {
    printf '%s%s%s\n' "$RED" "$1" "$CLEAR"
    exit 1
}

# Attempt to pull the openai key from system secret storage
# - if the 'security' command is present, try that first
#   - I'm using this first because it means the user doesn't have to install
#     anything
# - next, try using keyring
#   - this wraps up a couple different password managers for linux
#   - https://github.com/jaraco/keyring
#
# in either case, if the command returns an error, try to use the command to
# store the API key
function getSecret {
    if command -v security &> /dev/null; then
        if res=$(security find-generic-password -w -s openai 2>&1) && [[ -n $res ]]; then
            echo "$res"
        else
            # gpt key not found, prompt user for it and save to keychain
            read -r -s -p "Openai key: " apikey 
            >&2 echo
            security add-generic-password -U -s 'openai' -a 'gpt' -w "$apikey"
            echo "$apikey"
        fi
        return 0
    fi 

    if command -v keyring &> /dev/null; then
        if res=$(keyring get openai gpt 2>&1) && [[ -n $res ]]; then
            echo "$res"
        else
            # gpt key not found, prompt user for it and save to keyring
            read -r -s -p "Openai key: " apikey
            >&2 echo
            printf "%s\n" "$apikey" | keyring set openai gpt
            echo "$apikey"
        fi
        return 0
    fi

    die "unable to find a suitable secret storage. Please install keyring:

https://github.com/jaraco/keyring#installation---linux
"
}

OPENAIKEY=$(getSecret | tail -n1)
MODEL="gpt-3.5-turbo"
TEMPERATURE="0.7"
VERBOSE=
DATA_DIR="${XDG_DATA_HOME:-$HOME/.local/share}/gpt-bash"
DB="${DATA_DIR}/openai.sqlite3"
ADD_CONTEXT=true

# this function takes two parameters:
# $1: the context fragment, which should be json-formatted according to this
#     document: https://platform.openai.com/docs/guides/chat/introduction
# $2: the user's query as a string
function gptrequest {
    # use jq to sanitize $2 into a json string
    content=$(jq -n --arg x "$2" '$x')

    cat <<EOF
{
  "model": "$MODEL",
  "messages": [
    {"role": "system", "content": "You are a helpful assistant."},
    $1
    {"role": "user", "content": $content }
  ],
  "temperature": $TEMPERATURE,
  "stream": true
}
EOF
}

function gpt {
    # select approximately the last 2000 tokens' worth of context to send to
    # chatgpt. Return them in the chat format documented here:
    # https://platform.openai.com/docs/guides/chat/introduction
    #
    # token estimate as 3/4 character length from here:
    # https://help.openai.com/en/articles/4936856-what-are-tokens-and-how-to-count-them
    #
    # TODO: allow the amount of context to be configurable (?)
    if [[ -n $ADD_CONTEXT ]]; then
        context=$(sqlite3 "$DB" <<EOF
WITH messages AS (
    SELECT JSON_OBJECT('role','user','content',query->'messages[0].content')
           || ',' ||
           JSON_OBJECT('role','assistant','content',content) as context,
           SUM(3*(LENGTH(content)/4) + 3*(LENGTH(query->'messages[0].content')/4))
               OVER (ORDER by rowid desc) AS approx_tokens
    FROM streaming_chat_completions ORDER BY rowid DESC)
SELECT group_concat(context, ',') || ',' FROM messages WHERE approx_tokens < 2000;
EOF
)
    fi

    # https://platform.openai.com/docs/api-reference/chat
    #
    # "$*" is a string composed of all arguments to this function, joined by
    # IFS (which is a space character at this point, so space-delimited)
    request=$(gptrequest "${context:-}" "$*")

    # linux mktemp requires at least three Xs; bsd (and os x) mktemp will
    # ignore the Xs
    rawresponsef=$(mktemp -t raw-gpt-responses-XXXXXX)
    contentf=$(mktemp -t gpt-content-XXXXXX)

    if [[ -n $VERBOSE ]]; then
        echo "request to openai: $request"
    fi

    # make our request to openai, stream the response to the console, and tee
    # both the raw responses and our output to temp files so we can save them.
    # Store the start time and the finish time as well.
    #
    # XXX: I don't know what the error format looks like in streaming mode, or
    # how to properly handle them
    start=$(date +"%Y-%m-%dT%H:%M:%S%z")
    curl https://api.openai.com/v1/chat/completions \
        --silent --no-buffer \
        -H 'Content-Type: application/json' \
        -H "Authorization: Bearer $OPENAIKEY" \
        -d "$request" |
    tee "$rawresponsef" |
    sed -u 's/^data: //g' |
    jq --unbuffered -rj '.choices[0].delta.content // empty' 2>/dev/null |
    tee "$contentf"
    echo
    finish=$(date +"%Y-%m-%dT%H:%M:%S%z")

    # if there was an error and these files don't exist, just store empty
    # strings in these variables so that the result of the process still gets
    # written to the database
    rawresponse=$(cat "$rawresponsef" || echo -n)
    content=$(cat "$contentf" || echo -n)

    # print the raw response from openai if verbose is set
    if [[ -n $VERBOSE ]]; then
        echo "responses from openai: $rawresponse"
    fi

    # insert the request and response into the database. The funny-looking
    # search and replaces turn single quotes (') into doubled single quotes
    # (''), which is how sqlite wants you to escape them. It _seems_ that
    # the only thing we need to escape are single quotes, but maybe this is
    # an injection vector Iunno. Strings in bash, amirite?
    sqlite3 "$DB" <<EOF
INSERT INTO streaming_chat_completions
    (query, raw_responses, content, started_at, finished_at)
    VALUES(
        '${request//"'"/"''"}',
        '${rawresponse//"'"/"''"}',
        '${content//"'"/"''"}',
        '$start',
        '$finish');
EOF
    
    # clean up our temp files
    rm "$rawresponsef" "$contentf"
}

while true; do
    case $1 in
        help | -h | --help)
            usage
            ;;
        -m | --model)
            shift
            MODEL=$1
            shift
            ;;
        -t | --temperature)
            shift
            TEMPERATURE=$1
            shift
            ;;
        -v | --verbose)
            VERBOSE=true
            shift
            ;;
        -vv | --very-verbose)
            set -x
            shift
            ;;
        -p | --api-key)
            getSecret
            exit 1
            ;;
        -nc | --no-context)
            ADD_CONTEXT=
            shift
            ;;
        *)
            break
            ;;
    esac
done

if [[ -z $OPENAIKEY ]]; then
    tput setaf 1
    printf "ERROR: unable to find an openAI API key.\n\n"
    tput sgr0
    printf "You can set one by editing this script directly or, if you're on a mac, using:\n\n    security add-generic-password -s 'openai' -a '<account name>' -w '<api key>'\n\n"
    exit 1
fi

# if the directory for storing our database (~/.local/share/gpt-bash/ by
# default) doesn't exist, create it
if [ ! -d "$DATA_DIR" ]; then
    mkdir -p "$DATA_DIR"
fi

sqlite3 "$DB" <<EOF
CREATE TABLE IF NOT EXISTS streaming_chat_completions(
    query text,         -- the JSON query sent to openai
    raw_responses text, -- the full JSON transcript of our communication with openai
    content text,       -- the content we pulled out of raw_responses
    started_at text,    -- the date and time the request was made
    finished_at text    -- the date and time the request was completed
);
EOF

# if we're running in a pipe, consume stdin and add it to the prompt.
# Otherwise, run gpt with just the arguments we received
if [ ! -t 0 ]; then
    gpt "$@" $'\n' "$(cat)"
else
    gpt "$@"
fi
