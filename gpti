#!/usr/bin/env bash
#
# Installation (OS X):
#
# - save this file as "gpti" somewhere in your path
# - get an openai api key at: https://platform.openai.com/account/api-keys
# - save the openai api key to your keychain with:
#     security add-generic-password -s 'openai' -a '<account name>' -w '<api key>'
# - If you don't already have `jq`, install it with `brew install jq` or whatever
# - optional, if using iterm2: install `imgcat` somewhere in your path:
#     - https://iterm2.com/utilities/imgcat
#
# If you prefer, you can put your API key directly in here or modify the 
# `OPENAIKEY` line to use your preferred secrets manager

function usage {
    cat <<"EOF"
gpti [-vhp] <description>

generates an image via openai's /images/generations endpoint

FLAGS: 

    -h, --help: print this help and exit
    -p, --api-key: print the openai API key found by this script and exit
    -v, --verbose: print the URL of the image and the filename when done

EXAMPLE USAGE:

    gpti a drone photo of fenway park on opening day

STORAGE:

    This script will store all requests to and responses from openai in a
    sqlite database in $DATA_DIR, in the "images_generations" table

NOTE:

    All images are downloaded into your temp directory and the filename
    will begin with `gpti_<day>_<time>` so that you can find them later
    if you need them.
EOF
exit 1
}

RED=$(tput setaf 1)
CLEAR=$(tput sgr0)

function die {
    printf '%s%s%s\n' "$RED" "$1" "$CLEAR"
    exit 1
}

# Attempt to pull the openai key from system secret storage
# - if the 'security' command is present, try that first
#   - I'm using this first because it means the user doesn't have to install
#     anything
# - next, try using keyring
#   - this wraps up a couple different password managers for linux
#   - https://github.com/jaraco/keyring
#
# in either case, if the command returns an error, try to use the command to
# store the API key
function getSecret {
    if command -v security &> /dev/null; then
        if res=$(security find-generic-password -w -s openai 2>&1); then
            echo "$res"
        else
            # gpt key not found, prompt user for it and save to keychain
            read -r -s -p "Openai key: " apikey 
            >&2 echo
            security add-generic-password -s 'openai' -a 'gpt' -w "$apikey"
            echo "$apikey"
        fi
        return 0
    fi 

    if command -v keyring &> /dev/null; then
        if res=$(keyring get openai gpt 2>&1); then
            echo "$res"
        else
            # gpt key not found, prompt user for it and save to keyring
            read -r -s -p "Openai key: " apikey
            >&2 echo
            printf "%s\n" "$apikey" | keyring set openai gpt
            echo "$apikey"
        fi
        return 0
    fi

    die "unable to find a suitable secret storage. Please install keyring:

https://github.com/jaraco/keyring#installation---linux
"
}

OPENAIKEY=$(getSecret | tail -n1)
# Must be one of 256x256, 512x512, or 1024x1024
SIZE="1024x1024"
VERBOSE=
DATA_DIR="${XDG_DATA_HOME:-$HOME/.local/share}/gpt-bash"
DB="${DATA_DIR}/openai.sqlite3"

function gptirequest {
    cat <<EOF
{
  "prompt": "$@",
  "n": 1,
  "size": "$SIZE"
}
EOF
}

function gpti {
    dt=$(date +"%Y%m%d_%H%M")
    f="$(mktemp -t "gpti_$dt").png"
    request=$(gptirequest "$@")
    # https://platform.openai.com/docs/api-reference/images
    if res=$(curl https://api.openai.com/v1/images/generations -s \
        -H "Content-Type: application/json" \
        -H "Authorization: Bearer $OPENAIKEY" \
        -d "$request"); then

        # if there's an "error" key in the return value, we didn't succeed.
        # Print and quit
        if echo "$res" | jq -e 'has("error")' &> /dev/null ; then
            sqlite3 "$DB" <<EOF
INSERT INTO images_generations VALUES(
    '${request//"'"/"''"}',
    '${res//"'"/"''"}',
    '');
EOF
            echo "error: $res"
            exit 1
        fi
        url=$(echo "$res" | jq -r '.data[0].url')
    else
        sqlite3 "$DB" <<EOF
INSERT INTO images_generations VALUES( '${request//"'"/"''"}', '', '');
EOF
        tput setaf 1
        echo "error: $res"
        tput sgr0
        exit 1
    fi

    # download the image to a tempfile, and print it to the terminal
    curl -s "$url" -o "$f"

    # insert the request, response, and image into the database. The
    # funny-looking search and replaces turn single quotes (') into doubled
    # single quotes (''), which is how sqlite wants you to escape them.
    sqlite3 "$DB" <<EOF
INSERT INTO images_generations VALUES(
    '${request//"'"/"''"}',
    '${res//"'"/"''"}',
    readfile('$f'));
EOF

    # if imgcat is present, try outputting the image to the terminal
    if which imgcat &> /dev/null ; then
        echo
        imgcat < "$f"
    fi

    if [[ -n $VERBOSE ]]; then
        echo "URL: $url"
        echo "file: $f"
    fi
}

case $1 in
    help | -h | --help)
        usage
        ;;
    -v | --verbose)
        VERBOSE=true
        shift
        ;;
    -vv | --very-verbose)
        set -x
        shift
        ;;
    -p | --api-key)
        getSecret
        exit 1
        ;;
esac

if [[ -z $OPENAIKEY ]]; then
    tput setaf 1
    printf "ERROR: unable to find an openAI API key.\n\n"
    tput sgr0
    printf "You can set one by editing this script directly or, if you're on a mac, using:\n\n    security add-generic-password -s 'openai' -a '<account name>' -w '<api key>'\n\n"
    exit 1
fi

# if the directory for storing our database (~/.local/share/gpt-bash/ by
# default) doesn't exist, create it
if [ ! -d "$DATA_DIR" ]; then
    mkdir -p "$DATA_DIR"
fi

# if our table doesn't exist, create a table to use. I'm YOLOing versioning
# here
sqlite3 "$DB" <<EOF
CREATE TABLE IF NOT EXISTS images_generations(
    query text,    -- the JSON query sent to openai
    response text, -- the JSON response received from openai
    image blob     -- the image returned
);
EOF

gpti "$@"
